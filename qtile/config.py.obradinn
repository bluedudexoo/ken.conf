# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from typing import List  # noqa: F401

import os
import subprocess
from libqtile import bar, layout, widget, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy

# Colors
trans_light = "#fffffff0"
trans_dark = "#000000f0"
trans_cyan = "#00d5fff2"
inactive_text = "#4f4f4ff9"
active_text = "#0f0f0ff0"
highlight_text = "#fdfdfdff"
dark_cyan = "#09494ff9"
clear = "#00000000"

# Sunset Colors
sunset_blue_light = "#dcdbfff0"
sunset_orange = "#da4c00ef"
sunset_orange_dark = "#150800f0"
sunset_purple = "#7800daef"
sunset_purple_dark = "#02000cff"
terminal_orange = "#ff755eef"
terminal_orange_light = "ffc9bbf9"
terminal_purple = "#a180fff9"
terminal_text = "#fffbf7f9"

# Nautilus Colors
nautilus_black_dark = "#232627"
nautilus_black_light =  "#7f8c8d"
nautilus_red_dark = "#ed4f4f"
nautilus_red_light = "#c0392b"
nautilus_green_dark = "#10d180"
nautilus_green_light = "#1deba3"
nautilus_yellow_light = "#ff8331"
nautilus_yellow_dark = "#fdbc4b"
nautilus_blue_dark = "#1d99f3"
nautilus_blue_light = "#3daee9"
nautilus_magenta_dark = "#9b59b6"
nautilus_magenta_light = "#8e44ad"
nautilus_cyan_dark = "#1abc9cb9"
nautilus_cyan_light = "#16a085"
nautilus_white_dark = "#fcfcfc"
nautilus_white_light = "#ffffff"
nautilus_bg = "#0c0d12ff"
nautilus_bg_cyan = "#0d1416ff"
nautilus_bg_purple = "#0f0c12ff"
nautilus_highlight = ""
nautilus_highlight_blue = "#398f97f0"
nautilus_inactive_text = "#447a7af7"
nautilus_text_light = "#c8ebe7ff"

# Obra Dinn Colors
obradinn_text = "#fcfdc2f9"
obradinn_text_inactive = "#fcfdc280"
obradinn_fg_light1 = "#fdfde2f9"
obradinn_fg_light2 = "#fdf8f2ff"
obradinn_fg_dark1 = "#d0c8c0fd"
obradinn_fg_dark2 = "#baac9df9"
obradinn_fg_dark3 = "#7a6c5da0"
obradinn_fg_blue1 = "#d1ebfff9"
obradinn_fg_blue2 = "#e3fcfff9"
obradinn_bg_dark1 = "#1b1324f9"
obradinn_bg_dark2 = "#1b1324d0"
obradinn_red = "#fcffa6f9"
obradinn_orange = "#ffb280f9"
obradinn_green = "#40e592f9"
obradinn_blue = "#60a8fff9"
obradinn_purple = "#d537fff9"

mod = "mod4"

keys = [
    # Switch between windows
    Key([mod], "Left", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "Right", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "Down", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "Up", lazy.layout.up(), desc="Move focus up"),

    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "Left", lazy.layout.shuffle_left(),
        desc="Move window to the left"),
    Key([mod, "shift"], "Right", lazy.layout.shuffle_right(),
        desc="Move window to the right"),
    Key([mod, "shift"], "Down", lazy.layout.shuffle_down(),
        desc="Move window down"),
    Key([mod, "shift"], "Up", lazy.layout.shuffle_up(), desc="Move window up"),

    # Control window sizes
    Key([mod, "control"], "Left", lazy.layout.shrink_main()),
    Key([mod, "control"], "Right", lazy.layout.grow_main()),
    Key([mod, "control"], "Down", lazy.layout.normalize(), desc="Reset all window sizes"),

    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack"),

    # Toggle between different layouts as defined below
    Key([mod], "w", lazy.window.kill(), desc="Kill focused window"),

    # Switch between different groups relative to your current one
    Key([mod], "Tab", lazy.screen.next_group(),
        desc="Switch to next group/workspace."),
    Key([mod], "grave", lazy.screen.prev_group(),
        desc="Switch to previous group/workspace."),

    # Control Qtile
    Key([mod, "control"], "r", lazy.restart(), desc="Restart Qtile"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),

]

groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend([
        # mod1 + letter of group = switch to group
        Key([mod], i.name, lazy.group[i.name].toscreen(),
            desc="Switch to group {}".format(i.name)),

        # mod1 + shift + letter of group = switch to & move focused window to group
        Key([mod, "shift"], i.name, lazy.window.togroup(i.name, switch_group=True),
            desc="Switch to & move focused window to group {}".format(i.name)),
        # Or, use below if you prefer not to switch to that group.
        # # mod1 + shift + letter of group = move focused window to group
        # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
        #     desc="move focused window to group {}".format(i.name)),
        
    ])

layouts = [
    layout.MonadTall(
        margin=18,
        border_focus = obradinn_text,
        border_normal = obradinn_fg_dark1,
        ),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),
    # layout.Max(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

widget_defaults = dict(
    font = 'DejaVu Sans Mono Bold',
    fontsize = 15,
    fontsize_small = 10,
    fontsize_big = 22,
    padding = 6,
    #margin = 6,
    foreground = obradinn_bg_dark1,
)

extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
                widget.GroupBox(
                    background = obradinn_text,
                    urgent_border = obradinn_red,
                    active = obradinn_bg_dark2,
                    inactive = obradinn_fg_dark3,
                    highlight_method = "line",
                    highlight_color = clear,
                    rounded = False,
                    this_screen_border = trans_light,
                    this_current_screen_border = obradinn_bg_dark2,
                    block_highlight_text_color = obradinn_bg_dark1,
                    margin = 5,
                    ),
                widget.WindowName(
                    empty_string_group='Desktop',
                    background = obradinn_text,
                    ),
                widget.Mpris2(name='media! ',
                    background = obradinn_text,
                    ),
                widget.Battery(),
                widget.Notify(),
                widget.Systray(),
                widget.Clock(
                    background = obradinn_text,
                    format = '%a, %B %d %Y | %I:%M %p',
                    ),
            ],
            36,
            background = obradinn_text,
            foreground = obradinn_bg_dark1,
            margin = [12, 12, 0, 12],
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: List
main = None  # WARNING: this is deprecated and will be removed soon
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    *layout.Floating.default_float_rules,
    Match(wm_class='confirmreset'),  # gitk
    Match(wm_class='makebranch'),  # gitk
    Match(wm_class='maketag'),  # gitk
    Match(wm_class='ssh-askpass'),  # ssh-askpass
    Match(title='branchdialog'),  # gitk
    Match(title='pinentry'),  # GPG key password entry
])
auto_fullscreen = True
focus_on_window_activation = "smart"

@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser('~')
    subprocess.Popen(['/home/ken/.loginrc/qtile_start.sh'])

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
